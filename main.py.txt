import random
import asyncio
import sys
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes
)

BOT_KEY = os.getenv("8016972331:AAEAMAygo6zr_2uuFJYQiE-n7nC5dSx_N40")
CHOOSING, QUIZ = range(2)

keyboard = [
    ["–ü—Ä–∏–≤–µ—Ç", "–ö–∞–∫ –¥–µ–ª–∞?"],
    ["–®—É—Ç–∫–∞ üòÇ", "–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç üòä"],
    ["–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ üß†", "–¶–∏—Ç–∞—Ç–∞ üß†"],
    ["–ü–æ–∫–∞ üëã"]
]
markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

SHUTKI = [
    "–ü–æ—á–µ–º—É –∫–Ω–∏–≥–∞ –≥—Ä—É—Å—Ç–∏—Ç? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ—ë —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö.",
    "–ß—Ç–æ —Å–∫–∞–∑–∞–ª –Ω–æ–ª—å –≤–æ—Å—å–º—ë—Ä–∫–µ? –ü—Ä–∏—è—Ç–Ω—ã–π –ø–æ—è—Å–æ–∫!",
    "–ü–æ—á–µ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å –≤ —Ñ—É—Ç–±–æ–ª? –û–Ω –±–æ–∏—Ç—Å—è –≤–∏—Ä—É—Å–æ–≤!",
    "–ü–æ—á–µ–º—É —Å–∫–µ–ª–µ—Ç—É –Ω–µ –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–∏? –£ –Ω–µ–≥–æ –Ω–µ—Ç —Ç–µ–ª–∞ –¥–ª—è —Ç–∞–Ω—Ü–µ–≤.",
    "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –Ω–∞ –ø–ª—è–∂–µ? –û—Ç–¥—ã—Ö–∞–µ—Ç –æ—Ç –±–∞–≥–æ–≤!",
    "–ü–æ—á–µ–º—É —É—Ç–∫–∞ –ø–µ—Ä–µ—à–ª–∞ –¥–æ—Ä–æ–≥—É? –ß—Ç–æ–±—ã –¥–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ–Ω–∞ –Ω–µ —Ü—ã–ø–ª—ë–Ω–æ–∫!",
    "–ö–∞–∫–∞—è –æ–±—É–≤—å –ª—é–±–∏—Ç –º—É–∑—ã–∫—É? –ö—Ä–æ—Å—Å–æ–≤–∫–∏ —Å –±–∏—Ç–æ–º.",
    "–ü–æ—á–µ–º—É –ª–∞–º–ø–∞ —Å—á–∞—Å—Ç–ª–∏–≤–∞? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∞ —Å–≤–µ—Ç–ª–∞—è –ª–∏—á–Ω–æ—Å—Ç—å!",
    "–ß—Ç–æ —Å–∫–∞–∑–∞–ª –∫–æ—Ñ–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—É? ¬´–¢—ã –Ω–µ –º–æ–∂–µ—à—å –º–µ–Ω—è –∑–∞–º–µ–Ω–∏—Ç—å!¬ª",
    "–ö–∞–∫–æ–π –¥–µ–Ω—å —Å–∞–º—ã–π —Ç—è–∂—ë–ª—ã–π? –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫. –î–∞–∂–µ —á–∞–π —ç—Ç–æ –∑–Ω–∞–µ—Ç.",
    "–ü–æ—á–µ–º—É –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—Å–µ–≥–¥–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏? –£ –Ω–µ–≥–æ –≤—Å—ë –ø–æ —á–∏—Å–ª–∞–º.",
    "–ü–æ—á–µ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—ã –Ω–µ –ª—é–±—è—Ç –≤–æ–¥—É? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –±—ã—Å—Ç—Ä–æ —Ç–µ—Ä—è—é—Ç —Å–≤—è–∑—å.",
    "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ë–∂ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ? –ß–∏—Ç–∞–µ—Ç –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫.",
    "–ß—Ç–æ —Å–∫–∞–∑–∞–ª–∞ –ø–æ–¥—É—à–∫–∞ –æ–¥–µ—è–ª—É? –¢—ã –º–µ–Ω—è –Ω–∞–∫—Ä—ã–≤–∞–µ—à—å!",
    "–ü–æ—á–µ–º—É –Ω–∞ —Å–æ–ª–Ω—Ü–µ –Ω–µ –±—ã–≤–∞–µ—Ç –≤–µ—á–µ—Ä–∏–Ω–æ–∫? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–æ –≤—Å–µ–≥–¥–∞ –∑–∞–∂–∏–≥–∞–µ—Ç!",
    "–ü–æ—á–µ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≥—Ä—É—Å—Ç–∏—Ç? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ–≥–æ –ø–ª–æ—Ö–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.",
    "–ß—Ç–æ —Å–∫–∞–∑–∞–ª–∞ –ø–µ—á–µ–Ω—å–∫–∞ –º–æ–ª–æ–∫—É? –î–∞–π –æ–±–Ω–∏–º—É!",
    "–ü–æ—á–µ–º—É —É –ø—á–µ–ª –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –≤—Å–µ–≥–¥–∞ –∑–∞–Ω—è—Ç—ã!",
    "–ü–æ—á–µ–º—É –ø–∏—Ü—Ü–∞ –Ω–µ –∏–¥—ë—Ç –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª? –û–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫—Ä—É–≥–ª–∞—è.",
    "–ö–∞–∫–æ–π –Ω–∞–ø–∏—Ç–æ–∫ —É–º–µ–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å? –ö–æ—Ñ–µ-—Å–∫—Ä–∏–ø—Ç!"
]

COMPLIMENTS = [
    "–¢—ã –ª—É—á —Å–≤–µ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ üåü",
    "–¢—ã —Ç–∞–∫–æ–π —É–º–Ω—ã–π, —á—Ç–æ –¥–∞–∂–µ –±–æ—Ç –≤ —à–æ–∫–µ ü§Ø",
    "–¢—ã –ø—Ä–æ—Å—Ç–æ —à–∏–∫, –±–ª–µ—Å–∫, –∫—Ä–∞—Å–æ—Ç–∞ üòç",
    "–¢—ã –∑–∞—Ä—è–∂–∞–µ—à—å –ø–æ–∑–∏—Ç–∏–≤–æ–º üîã",
    "–° —Ç–æ–±–æ–π –¥–∞–∂–µ –±–∞–≥–∏ –Ω–µ —Å—Ç—Ä–∞—à–Ω—ã üõ°Ô∏è"
]

QUOTE_LIST = [
    "–¢–æ—Ç, –∫—Ç–æ —Ö–æ—á–µ—Ç ‚Äî –∏—â–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –¢–æ—Ç, –∫—Ç–æ –Ω–µ —Ö–æ—á–µ—Ç ‚Äî –∏—â–µ—Ç –ø—Ä–∏—á–∏–Ω—ã.",
    "–ù–∞—Å—Ç–æ—è—â–∞—è —Å–∏–ª–∞ –Ω–µ –≤ –º—ã—à—Ü–∞—Ö, –∞ –≤ —É–º–µ–Ω–∏–∏ –∏–¥—Ç–∏ –≤–ø–µ—Ä—ë–¥, –∫–æ–≥–¥–∞ —Å–ª–æ–∂–Ω–æ.",
    "–¢–µ—Ä–ø–µ–Ω–∏–µ ‚Äî –Ω–µ —Å–ª–∞–±–æ—Å—Ç—å, –∞ —Å–ø–æ—Å–æ–± –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é —Å–∏–ª—É.",
    "–î–µ–ª–∞–π —Å–µ–≥–æ–¥–Ω—è —Ç–æ, —á—Ç–æ –¥—Ä—É–≥–∏–µ –Ω–µ —Ö–æ—Ç—è—Ç ‚Äî –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—à—å –∂–∏—Ç—å —Ç–∞–∫, –∫–∞–∫ –¥—Ä—É–≥–∏–µ –Ω–µ –º–æ–≥—É—Ç.",
    "–ù–µ –≤–∞–∂–Ω–æ, –∫–∞–∫ –º–µ–¥–ª–µ–Ω–Ω–æ —Ç—ã –∏–¥—ë—à—å, –ø–æ–∫–∞ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—à—å—Å—è."
]

QUIZ_QUESTIONS = [
    {"question": "–ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ ‚Äî —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è?", "options": ["Python", "–ö–æ—Ñ–µ", "–ü–∏—Ü—Ü–∞", "–°–ª–æ–Ω"], "answer": "Python"},
    {"question": "–ö–∞–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∞ Telegram?", "options": ["Meta", "Telegram", "Google", "Apple"], "answer": "Telegram"},
    {"question": "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –≤–∏—Å–æ–∫–æ—Å–Ω–æ–º –≥–æ–¥—É?", "options": ["365", "366", "364", "360"], "answer": "366"},
    {"question": "–ö–∞–∫ –∑–æ–≤—É—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è Facebook?", "options": ["–ò–ª–æ–Ω –ú–∞—Å–∫", "–ú–∞—Ä–∫ –¶—É–∫–µ—Ä–±–µ—Ä–≥", "–ü–∞–≤–µ–ª –î—É—Ä–æ–≤", "–ë–∏–ª–ª –ì–µ–π—Ç—Å"], "answer": "–ú–∞—Ä–∫ –¶—É–∫–µ—Ä–±–µ—Ä–≥"},
    {"question": "–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?", "options": ["–ë–µ—Ä–ª–∏–Ω", "–ü–∞—Ä–∏–∂", "–†–∏–º", "–õ–æ–Ω–¥–æ–Ω"], "answer": "–ü–∞—Ä–∏–∂"},
    {"question": "–ö–∞–∫–æ–π –≥–∞–∑ –º—ã –≤–¥—ã—Ö–∞–µ–º?", "options": ["–ê–∑–æ—Ç", "–ö–∏—Å–ª–æ—Ä–æ–¥", "–£–≥–ª–µ–∫–∏—Å–ª—ã–π –≥–∞–∑", "–í–æ–¥–æ—Ä–æ–¥"], "answer": "–ö–∏—Å–ª–æ—Ä–æ–¥"},
    {"question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —è–∑—ã–∫ –≤–µ–±-—Ä–∞–∑–º–µ—Ç–∫–∏?", "options": ["HTML", "Python", "C++", "SQL"], "answer": "HTML"},
    {"question": "–ö–∞–∫–æ–π –æ–∫–µ–∞–Ω —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π?", "options": ["–ê—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π", "–ò–Ω–¥–∏–π—Å–∫–∏–π", "–¢–∏—Ö–∏–π", "–°–µ–≤–µ—Ä–Ω—ã–π"], "answer": "–¢–∏—Ö–∏–π"},
    {"question": "–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?", "options": ["8", "9", "10", "7"], "answer": "8"},
    {"question": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª ¬´–í–æ–π–Ω–∞ –∏ –º–∏—Ä¬ª?", "options": ["–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π", "–¢–æ–ª—Å—Ç–æ–π", "–ü—É—à–∫–∏–Ω", "–ß–µ—Ö–æ–≤"], "answer": "–¢–æ–ª—Å—Ç–æ–π"},
    {"question": "–ß—Ç–æ —Ç—è–∂–µ–ª–µ–µ: –∫–∏–ª–æ–≥—Ä–∞–º–º –≤–∞—Ç—ã –∏–ª–∏ –∂–µ–ª–µ–∑–∞?", "options": ["–í–∞—Ç–∞", "–ñ–µ–ª–µ–∑–æ", "–û–¥–∏–Ω–∞–∫–æ–≤–æ", "–ù–µ –∑–Ω–∞—é"], "answer": "–û–¥–∏–Ω–∞–∫–æ–≤–æ"},
    {"question": "–ö—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞–ª –ú–æ–Ω—É –õ–∏–∑—É?", "options": ["–ú–∏–∫–µ–ª–∞–Ω–¥–∂–µ–ª–æ", "–î–∞–ª–∏", "–î–∞ –í–∏–Ω—á–∏", "–ü–∏–∫–∞—Å—Å–æ"], "answer": "–î–∞ –í–∏–Ω—á–∏"},
    {"question": "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ —Å—É—Ç–∫–∞—Ö?", "options": ["24", "12", "48", "60"], "answer": "24"},
    {"question": "–ö–∞–∫–æ–µ —á–∏—Å–ª–æ –∏–¥—ë—Ç –ø–æ—Å–ª–µ 99?", "options": ["98", "100", "101", "99.5"], "answer": "100"},
    {"question": "–ß—Ç–æ –µ–¥—è—Ç –ø—á—ë–ª—ã?", "options": ["–ú—ë–¥", "–ü—ã–ª—å—Ü—É", "–ú—è—Å–æ", "–§—Ä—É–∫—Ç—ã"], "answer": "–ü—ã–ª—å—Ü—É"},
    {"question": "–°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –Ω–∞–∑–µ–º–Ω–∞—è –∂–∏–≤–æ—Ç–Ω–æ–µ?", "options": ["–ì–µ–ø–∞—Ä–¥", "–õ–µ–≤", "–¢–∏–≥—Ä", "–ö—Ä–æ–ª–∏–∫"], "answer": "–ì–µ–ø–∞—Ä–¥"},
    {"question": "–ö–∞–∫–æ–π –º–µ—Ç–∞–ª–ª –¥–æ—Ä–æ–≥–æ–π?", "options": ["–ú–µ–¥—å", "–°–µ—Ä–µ–±—Ä–æ", "–ó–æ–ª–æ—Ç–æ", "–ñ–µ–ª–µ–∑–æ"], "answer": "–ó–æ–ª–æ—Ç–æ"},
    {"question": "–ß–µ–º –¥—ã—à–∞—Ç —Ä—ã–±—ã?", "options": ["–õ—ë–≥–∫–∏–º–∏", "–ñ–∞–±—Ä–∞–º–∏", "–ö—Ä—ã–ª—å—è–º–∏", "–ö–æ–∂–µ–π"], "answer": "–ñ–∞–±—Ä–∞–º–∏"},
    {"question": "–ö–∞–∫–æ–π —è–∑—ã–∫ —É —Ä–æ–±–æ—Ç–æ–≤?", "options": ["–ú–∞—à–∏–Ω–Ω—ã–π", "–õ–∞—Ç–∏–Ω—Å–∫–∏–π", "Python", "–ù–µ–º–µ—Ü–∫–∏–π"], "answer": "–ú–∞—à–∏–Ω–Ω—ã–π"},
    {"question": "–°–∫–æ–ª—å–∫–æ –∫–æ–ª—ë—Å —É –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞?", "options": ["4", "2", "3", "1"], "answer": "2"},
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø —Ç–≤–æ–π –≤–µ—Å—ë–ª—ã–π Telegram-–±–æ—Ç üòÑ", reply_markup=markup
    )

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    name = update.effective_user.first_name

    if "–ø—Ä–∏–≤–µ—Ç" in text:
        await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç–∏–∫, {name} üòé", reply_markup=markup)
    elif "–∫–∞–∫ –¥–µ–ª–∞" in text:
        await update.message.reply_text("–£ –º–µ–Ω—è –≤—Å—ë –∫—Ä—É—Ç–æ! –ê —É —Ç–µ–±—è –∫–∞–∫? üòä", reply_markup=markup)
    elif "–ø–æ–∫–∞" in text:
        await update.message.reply_text(f"–î–æ —Å–∫–æ—Ä–æ–≥–æ, {name}! –ë—É–¥—É —Å–∫—É—á–∞—Ç—å! üëã", reply_markup=markup)
    elif "—à—É—Ç–∫–∞" in text:
        await update.message.reply_text(random.choice(SHUTKI), reply_markup=markup)
    elif "–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç" in text:
        await update.message.reply_text(random.choice(COMPLIMENTS), reply_markup=markup)
    elif "—Ü–∏—Ç–∞—Ç–∞" in text:
        await update.message.reply_text(random.choice(QUOTE_LIST), reply_markup=markup)
    elif "–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞" in text:
        return await start_quiz(update, context)
    else:
        await update.message.reply_text(f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å, {name}! –ù–æ —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å ü§î", reply_markup=markup)

async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = random.choice(QUIZ_QUESTIONS)
    context.user_data["current_question"] = question
    options_markup = ReplyKeyboardMarkup(
        [[o] for o in question["options"]], resize_keyboard=True, one_time_keyboard=True
    )
    await update.message.reply_text(f"–í–æ–ø—Ä–æ—Å: {question['question']}", reply_markup=options_markup)
    return QUIZ

async def quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_answer = update.message.text
    question = context.user_data.get("current_question", {})

    if user_answer == question.get("answer"):
        await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", reply_markup=markup)
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['answer']}", reply_markup=markup)

    return ConversationHandler.END

def run_bot():
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    app = Application.builder().token(BOT_KEY).build()

    conv_quiz = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("(?i)–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞"), start_quiz)],
        states={QUIZ: [MessageHandler(filters.TEXT & ~filters.COMMAND, quiz_answer)]},
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_quiz)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
    app.run_polling()

if __name__ == "__main__":
    run_bot()
